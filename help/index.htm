<!DOCTYPE html>
<html lang="en">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>TAPIS: Tables from APIs for Sensors (Sensor Things API plus Explorer)</title>
	<link rel="icon" type="image/x-icon" href="../favicon.ico">

	<link rel="stylesheet" href="../tapis.css">

</head>

<body>
	<table border="0" style="width:100%">
		<tr>
			<td>
				<table>
					<tr>
						<td><img src="../logo.png" height="70"></td>
						<td>
							<div style="font-size: 30px; font-weight: bold;">TAPIS</div>
							<div style="font-size: 20px; font-weight: bold;">Tables from APIS</div>
							<div style="font-size: 10px; font-weight: normal;">or an API Explerer and a Table Manager
							</div>
						</td>
					</tr>
				</table>
			</td>
		</tr>
	</table>

<H1>Help</H1>

<H2>Table of content</H2>
<ul>
<li><a href="#help">How TAPIS works</a></li>
<ul>
<li><a href="#helpStart">How start with TAPIS</a></li>
<li><a href="#helpConnectingNodes">Connecting nodes</a></li>
<li><a href="#helpLeafNodes">Leaf nodes</a></li>
<li><a href="#helpSTAvsTableNodes">SensorThings API nodes vs Table nodes</a></li>
</ul>
<li><a href="#recipes">Recipes</a></li>
<ul>
<li><a href="#recipe01">Recipe 1: Understanding the concept of Datastream in STAplus</a></li>
<li><a href="#recipe02">Recipe 2: Show the current evolution of a variable captured by a particular party</a></li>
<ul>
<li><a href="#recipe02_01">Cooking method 1: Recurrently selecting a row using entity identifiers</a>
<li><a href="#recipe02_02">Cooking method 2: Filtering observations</a>
</ul>
<li><a href="#recipe03">Recipe 3: Show a map of all observation features in an STA service</a></li>
<li><a href="#recipe04">Recipe 4: Add semantics (meaning) to a table and share, retrieve and store it</a></li>
<li> <a href="#recipe05_01">Recipe 5: Selecting temperatures from an area </a></li>
<ul>
<li><a href="#recipe05_01">Recipe 5_1: Selecting temperatures with a determined polygon</a></li>
<li><a href="#recipe05_02">Recipe 5_2: Selecting temperatures whose distance from a certain point is greater or lower than an established distance</a></li>
</ul>
<li><a href="#recipe06">Recipe 6: Creating a new stream of observations</a></li>
<li><a href="#recipe07">Recipe 7: Connecting to a data catalogue and giving user feedback about a dataset</a></li>
<li><a href="#recipe08">Recipe 8: Connecting to a S3 service and retreive and view a CSV file in a S3 bucket</a></li>
<li><a href="#recipe09">Recipe 9: Drawing a stacked bar chart</a></li>
</ul>
</ul>

<hr>
<a id="help"></a>
<h2>How TAPIS works</h2>
TAPIS is a API explorer and a table manager. TAPIS reads data and metadata from some supported APIs and some data file formats and structures the data as tables that can be managed and transformed. Internally, everything is a table that has columns that represents fields and rows that represent records.
<p>
The supported data sources are: Sensor Things API, STAplus, OGC API Features/Records, OGC Catalogue Service for the Web, S3 Services, Eclipse Data Connectors, CSV, DBF, JSON-LD, JSON and GeoJSON files. Once the data is represented as a table, it can be directly viewed, edited, semantically enriched, filtered, joint, grouped by, aggregated, etc.
A part of a classical rows and columns tabular representation, data can be presented as bar charts, pie charts, scatter plots, and maps. TAPIS is integrated with <a href="https://github.com/grumets/nimmbus">NiMMbus</a> (MiraMon implementation of the Geospatial User Feedback) and with the <a href="https://github.com/grumets/MiraMonMapBrowser">MiraMon Map Browser</a>.
<p>
<p>
While the project is completely independent from the <a href="https://orangedatamining.com/">Orange data mining</a> software, it has been inspired by its GUI design. If you have used Orange in the past, you will immediately know how TAPIS works.
<p>
But there are some differences with Orange:
<ul>
<li>TAPIS is a JavaScript interface that does not required installation
<li>Columns can be semantically tagged adding meaning to the data fields
<li>TAPIS connect with external APIS such as SensorThings API (STA) and STAplus as sources for tabular data. 
</ul>

<a id="helpStart"></a>
<h3>How start with TAPIS</h3>
The workspace of TAPIS can be divided in the following areas
<br>
<img src="help_tapisAreas.png" width="800" class="center">
<p>
In TAPIS, the first thing that you need to do is to place a starting node in the network area. 
Examples of starting nodes are "Add STA service",  "Import CSV" or "Import GeoJSON". Clicking on them in the <i>button area</i> will place them in the <i>network area</i>. Doubleclicking on their representation in the network area will make appear dialog box to specify the parameters necessary to import the data in TAPIS. After accepting the options messages about the progress and eventual errors will appear in the <i>Information area</i>. The result of the operation will be represented as a table in the <i>Query and table area</i> (a STA query will also be shown if the node is a STA node; the ones with blue icons).
<p>
Next thing is connecting other nodes to the starting nodes. 

<a id="helpConnectingNodes"></a>
<h3>Connecting nodes</h3>
There are two ways to do so:
<ul>
<li>Right click in the previous node will make visible a dialog box with many buttons. Select one of them and it will be placed in the <i>network area</i> as a new node and it will be automatically connected to the previous node.
<li>Click on one of the buttons of the button area to create a new node in the network area. This node will not be connected to any previous node. You will need to connect the node to the previous node by clicking in the "Connect to nodes" button and the click on the new node and then in the previous node.
</ul>

Connections represents the inheritance of information. So if two nodes are connected, the arrow points to the node that is the data source of the next target node (like in a lineage diagram). You can see arrows as "data dependencies". In other words, the information "travels" in the opposite direction of the arrows. Commonly a target node uses the tabular data represented by source node and operates with it to create a new table. Nodes can be source nodes of as many target nodes as needed. Nodes can be target nodes and source nodes at the same time.
<br>
<img src="help_sourceTarget.png" width="400" class="center">
<p>

<a id="helpLeafNodes"></a>
<h3>Leaf nodes</h3>
Since almost all nodes represent data in tabular form, the "Table" button is a good asset to check the content of a node.
<p>
"Table" is an example of "leaf node". Leaf nodes cannot be the source node of any other node and represent the "leafs" of a network representation. Other examples of leaf nodes are "Scatter plot", "One value", "View query" or, "Save table".
<br>
<img src="help_Table.png" width="800" class="center">
<p>

<a id="helpSTAvsTableNodes"></a>
<h3>SensorThings API nodes vs Table nodes</h3>
Some operations are performed by TAPIS directly (the ones that has grey icons) and some others are performed by the STA (the ones that has blue elements in the icon). For the STA icons, TAPIS will only build queries and wait for the STA server to return the new table. A blue node can commonly be a source node for a grey node but a grey node cannot be a source node for a blue node.

<hr>
<a id="recipes"></a>
<H2>Recipes</H2>
Just a few collection of recipes are provided. The steps of the recipes can be reproduced by you or can be shown  More recipes to come soon!
<br><br><br>
<hr width="30%">
<a id="recipe01"></a>
<h3>Recipe 1: Understanding the concept of Datastream in STAplus</h3>
In this example, we would like to illustate what is a Datastream and how to use it. A <i>Datastream</i> is "container" entity; a convenience that contains a collection of observations of a single <i>ObservedProperty</i>, captured by a single <i>Thing</i> using a single <i>Sensor</i> managed by a single <i>Party</i> and shared with the same <i>license</i>. The relation with the different entities in the STAplus data model is illustrated in the following UML diagram. We will use TAPIS to generate an equivalent diagram an explore the content of each entity.<br>
<br>
<img src="STAplusSensingEntities.png" width="800" class="center">

We will start by selecting by connecting to our favourite Sensor Things API plus service. We do that by using the [Add STA service]. By double-clicking in the creating icon you can select the service or type the URL of th landing page.
<p>
From the landing page, all entity types are available. This give us the flexibility to explore the model from different points of view. In our case we would like to explore Datastreams. We will right-click in the STA service and we will select the [DataStreams] button. This will give us access to all Datastreams.<br>
<img src="recipe01_pressDatastreams.png" width="600" class="center">
<p>
While it is possible to use [View table] to see the properties of the available datastreams, we will use the [Select Row] button (the blue one) to directly select a particular Datastream.<br>
<img src="recipe01_pressSelectRow.png" width="600" class="center">

<p>
We will select a datastream that we like to start exploring its content. While we selecting it we can see that the description of the units of measure is part of the Datastream.<br>
<img src="recipe01_selectDatastream.png" width="800" class="center">
<p>
Now we are ready to reproduce the UML diagram by connecting Datastream with all entities directly connected to it. We can do it by rigth clicking on Datastream and selecting the entity as we did before.<br>
<img src="recipe01_entitiesConnectedToDataStream.png" width="400" class="center">
<p>
The content of the node as a table can be seen in the <i>Query and table area</i> directly by selecting the node by a single left click. It is also possible (but no longuer necessary) to add a connection to [View table] to any of this entities to open a dialog with its content.<br>
<img src="recipe01_entitiesToDataStreamTable.png" width="800" class="center">
<p>
A Datastream is a collection of observations. This allows us to see the observations as a table.<br>
<img src="recipe01_datastreamObservations.png" width="600" class="center">
<p>
All the observations in a datastream are done by the same Party...<br>
<img src="recipe01_datastreamParty.png" width="600" class="center">
<p>
...with the same device (Thing)...<br>
<img src="recipe01_datastreamThing.png" width="600" class="center">
<p>
...in the same current location...<br>
<img src="recipe01_datastreamLocation.png" width="800" class="center">
<p>
...observing the same observed property...<br>
<img src="recipe01_datastreamObservedProperty.png" width="800" class="center">
<p>
...shared with the same License.<br>
<img src="recipe01_datastreamLicense.png" width="800" class="center">
<p>
and that is why they are a coherent time series that can be represented in a single scatter plot by adding the [scatter plot] tool to the observations node.<br>
<img src="recipe01_datastreamScatterPlot.png" width="800" class="center">
<p>
We can extend the diagram further by selecting one observation with the blue [select row]...<br>
<img src="recipe01_observationSelectOne.png" width="800" class="center">
<p>
... and then add a [FeaturesOfInterest] and a [observationsGroup]
<br>
<img src="recipe01_entitiesConnectedToObservation.png" width="800" class="center">
<p>
This way we can know the position ofot he feature of interest...<br>
<img src="recipe01_observationFeatureOfInterest.png" width="800" class="center">
<p>
... and read about the observation group.<br>
<img src="recipe01_observationObsGroup.png" width="600" class="center">
<p>
<br><br><br>
<hr width="30%">

<a id="recipe02"></a>
<h3>Recipe 2: Show the current evolution of a variable captured by a particular party</h3>
In this example, we illustrate how to monitor a variable capture by a particular party. The way this is done, is conditioned by the STAplus entities data model (see the figure below) that relates Observations to Party through Datastream.<br>

<p>
We will start by using the "Add STA service" tool to type the URL of the landing page of our favorite STAplus service. Instead, we can select one from the list of suggested STA services.<br>
<img src="recipe02_openstaSugg.png" width="600" class="center">.

<br><br><br>
<hr width="30%">
<a id="recipe02_01"></a>
<h4>Cooking method 1: Recurrently selecting a row using entity identifiers</h4>

We will start by selecting a Party, selecting the observed variable by selecting the Datastream (that contains properties that tell us about the ObservedProperty; this saving us the need to actually querying the ObservedProperty). Finally, we will request the most recent observations in that Datastream.

<p>
Then we can request the list of parties available by using the "Parties" tool. We can then see all parties by using the "Table" tool or even better, see the same list and select one from the list using the "Select Row" tool. We are selecting the "Joan Maso" party.<br>
<img src="recipe02_01_selectParty.png" width="600" class="center">

<p>
Now we can add the "Datastreams" to access the Datastreams generated by Joan Maso. It is a common mistake to try to connect a tool representing an entity (in plural) to another entity (in plural) directly. Please note that you can only connect two entities in plural if you select on entity with "Select Row" first and only if they are directly connected in the Entities diagram. We are only interested in one particular Datastream in this exercise, so we will use the "Select Row" tool again to select the Ambient Temperature variable.<br>
<img src="recipe02_01_selectDatastream.png" width="800" class="center">

<p>
At this point, it becomes difficult to remember our selections. We can use the "Rename" tool or simply press F2 to change the name of the selection tools to a more intuitive name.<br>
<img src="recipe02_01_rename.png" width="600" class="center">

<p>
Finally, we will be able to see the Observations about Temperature done by Joan Maso adding the Tool "Observations" and adding the "Table" after it.<br>
<img src="recipe02_01_observations.png" width="600" class="center">

<p>
By doubleclicking the "Table" tool, we will see the observations as a table with the properties that the Entity "Observations" has in the diagram: phenomenonTime (the time where the sample was collected), result (the actual value of the temperature) and resultTime (the time the observation was determined and recorded). If we look at the table, we can see that we get 100 observations and time is increasing so we can assume they are in order starting by the earliest one.<br>
<img src="recipe02_01_observationsTable.png" width="400" class="center">

<p>
Commonly, we are interested in the latest observations (possibly the current ones) so we will request them in descending order by using the "Sort By" and specifying that we want to sort by "phenomenonTime" in descending order. We can also change the number of records requested to a bigger number. 
<br>
<img src="recipe02_01_observationsSortBy.png" width="600" class="center">

<p>
Behind the scenes, the tool is creating STA queries and sending them to the STAplus service. The responses of these queries are converted into a tabular format (that is the common representation format in TAPIS). We can learn about the actual request done using the "View Query" tool.
<br>
<img src="recipe02_01_viewQuery.png" width="800" class="center">

<p>
We can even click on the provided link to see the actual response to the query in the original JSON format (or in a nicer representation as objects if we use FireFox).
<br>
<img src="recipe02_01_queryResponse.png" width="800" class="center">

<p>
We can also see the last temperatures as a scatter plot by using the "Scatter Plot" tool and pressing the "Draw" button.
<br>
<img src="recipe02_01_scatterPlot.png" width="800" class="center">

<p>
Unfortunately, there is no mention of the variable or the units of measure in the graphic. This is because this information is not on the Observations entity but in the previous entity: Datastream. We can see the properties of Datastream such as name, description and unitOfMeasurement. In here we see one of the limitations of the tabular common representation used in TAPIS: in property that is an object its values are represented as JSON serialization.
<br>
<img src="recipe02_01_datastreamTemperatureRecord.png" width="600" class="center">

<p>
In case a JSON object needs to be used, the tool "Separate columns" split all JSON serialized columns into separated columns. In this case, unitOfmeasurement is splitted in unitOfmeasurement/name, unitOfmeasurement/symbol and unitOfmeasurement/definition.
<br>
<img src="recipe02_01_separateColumns.png" width="600" class="center">

<p>
Now we can link this split record into the scatter plot with the "Connect two nodes" and then clicking  the "Scatter plot" and the "Separate columns" (in this order), creating a pentagonal shape. Now the scattered plot has more possibilities to select and the title of the diagram is more expressive showing both the name of the datastream and the units of measure.
<br>
<img src="recipe02_01_scatterPlotUoM.png" width="800" class="center">

<p>
Another way of showing the last observation value (the current value, if the sensor is live) is to use the "One value" tool. This tool represents the last captured value directly below the node icon as a title. If the selected STA service is websub enabled, the implementation refreshes the value everytime a new observation arrives. That is particularly useful for datastreams that are constantly incorporating new observations. If the STA is not websub enabled, it refreshes its value the indicated fixed number of seconds. The websub implementation is much more efficient than repeated HTTP requests, as it keeps a websocket connection with a webhook server permanently open. The refreshing can be stopped by double clicking in the same node and pressing [Stop refresh].
<br>
<img src="recipe02_01_oneValue.png" width="600" class="center">

<p>
We can see the last temperature captured in the icon in the center of the pentagon. We can also see the value in the information window, as well as the promise to see a refreshed when the value is updated.<br>
<img src="recipe02_01_oneValueView.png" width="800" class="center">

<p>
If the value is over the alerting value, the color of the icon and the text changes.<br>
<img src="recipe02_01_oneValueAlert.png" width="300" class="center">

<br><br><br>
<hr width="30%">
<a id="recipe02_02"></a>
<h4>Cooking method 2: Filtering observations</h4>

We will start by looking at Observations, by connecting the "Observations" tool to the STA server. This will give us access to all observations intermixed, regardless who produced the data, or what is the observed variable.
<br>
<img src="recipe02_02_allObservations.png" width="600" class="center">

<p>
By the use of the FilterRowsSTA tool, we are able to formulate complex queries with no much effort. 
<br>
<img src="recipe02_02_filterRowsSTATool.png" width="200" class="center">

<p>
We formulate 2 conditions on having a party with displayName equal to "Joan Masó" and a observedProperty with a definition equal to "http://vocabs.lter-europe.net/EnvThes/22035". We use the nexus "and" for joining these two conditions.
<br>
<img src="recipe02_02_filterPartyObservedProperty.png" width="800" class="center">

<p>
There is a tool to select the right entity where the property to formulate the condition exist.
<br>
<img src="recipe02_02_selectEntity.png" width="300" class="center">
<p>
This is how the internal query looks like: <a href="https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=((Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27)and(Datastream/ObservedProperty/definition%20eq%20%27http://vocabs.lter-europe.net/EnvThes/22035%27))">https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=((Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27)and(Datastream/ObservedProperty/definition%20eq%20%27http://vocabs.lter-europe.net/EnvThes/22035%27))</a>
<p>
Next step is to expand the link properties in the result, limiting the information extracted to the phenomenonTime, result, unitOfMeasurement, definition and name of the observedProperty.
<br>
<img src="recipe02_02_expandSelect.png" width="800" class="center">

<p>
Commonly, we are interested in the latest observations (possibly the current ones) so we will request them in descending order by using the "Sort By" and specifying that we want to sort by "phenomenonTime" in descending order. We can also change the number of records requested to a bigger number. 
<br>
<img src="recipe02_02_observationsSortBy.png" width="600" class="center">
<P>
This generate a complex query that looks like: <a href="https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=((Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27)and(Datastream/ObservedProperty/definition%20eq%20%27http://vocabs.lter-europe.net/EnvThes/22035%27))&$select=phenomenonTime,result&$expand=Datastream($select=unitOfMeasurement;$expand=ObservedProperty($select=name,definition))&$orderby=phenomenonTime%20desc">https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=((Datastream/Party/displayName%20eq%20%27Joan%20Mas%C3%B3%27)and(Datastream/ObservedProperty/definition%20eq%20%27http://vocabs.lter-europe.net/EnvThes/22035%27))&$select=phenomenonTime,result&$expand=Datastream($select=unitOfMeasurement;$expand=ObservedProperty($select=name,definition))&$orderby=phenomenonTime%20desc</a>

<p>
Now we are ready to separate the columns of the STA result and then show it as a table and as scatter plot.
<br>
<img src="recipe02_02_SeparateColumnsTableScatter.png" width="600" class="center">

<p>
This is the resulting table that contains a time series of temperature measurements and other columns with constant content
<br>
<img src="recipe02_02_SeparateColumnsTable.png" width="800" class="center">

<p>
And this is the result as a scatter plot.
<br>
<img src="recipe02_02_SeparateColumnsScatterPlot.png" width="800" class="center">

<br><br><br>
<hr width="30%">
<a id="recipe03"></a>
<h3>Recipe 3: Show a map of all observation features in an STA service</h3>
In this example, we illustrate how to show a map of all observation features stored in the STA with a view of the last observations. 

<p>
We will start by using the "Add STA service" tool to type the URL of the landing page of our favorite STAplus service. We will connect it to observations to get the "Observations" stored in the service.
<br>
<img src="recipe03_observationsTable.png" width="800" class="center">

<p>
The problem with "Observations" is that it only shows values and times with no mention of the meaning of the values. "Observations" returns links to the "Datastream" and the "FeatureOfInterest" that can be visited to get the actual properties of them. To reveal the actual meaning of the values in the same table, we need expand the units of measure stored in the "Datastream" as well as the variable name stored in "ObservedProperties". We will also need to get the actual positions of the observed variable that are stored in "FeaturesOfInterest". All this can be achieved by using the "Expand Columns" tools that allow us to select the needed properties (in practice removing the non-selected ones from the result) and expand the needed objects to see the properties directly in the table.<br>
<br>
<img src="recipe03_selectExpand.png" width="600" class="center">

<p>
Commonly, we are interested in the last observations on the latest observations (possibly the current ones) so we will request them in descending order by using the "Sort By" and specifying that we want to sort by "phenomenonTime" in descending order. We can also change the number of records requested to a bigger number. 
<br>
<img src="recipe03_sortBy.png" width="600" class="center">

<p>
This has created a complex STA query that we can examine with the "View query" tool. This is the actual query URL:
<br>
<a href="https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$select=phenomenonTime,result&$expand=Datastream($select=unitOfMeasurement;$expand=ObservedProperty($select=name,definition,description)),FeatureOfInterest($select=description,feature)&$orderby=phenomenonTime desc">https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$select=phenomenonTime,result&$expand=Datastream($select=unitOfMeasurement;$expand=ObservedProperty($select=name,definition,description)),FeatureOfInterest($select=description,feature)&$orderby=phenomenonTime desc</a>
<br>
The same query can be generated directly by connecting the "Observations layer" tool to the "Add STA service". This tool acts as a macro that has the predefined query stored.

<p>
Still we have the problem that the expanded entities are shown as serialized JSON objects. The tool "Separate columns" splits all JSON serialized columns into separated columns. The final table contains all the fields needed to build a time series.
<br>
<img src="recipe03_separateColumns.png" width="500" class="center">

<p>
The resulting table is ready to be converted into a map. 
<br>
<img src="recipe03_openMapBrowser.png" width="800" class="center">

<p>
By selecting the right fields and pressing the "Open" button, a map browser emerges with an extra layer that shows the last observations as a time series. By clicking in the point icons we can see the time evolution of the different variables.
<br>
<img src="recipe03_mapBrowser.png" width="800" class="center">

<p>
It is also possible to create a GeoJSON and a GeoJSON schema using the "Save layer" tool.
<br>
<img src="recipe03_saveGeoJSON.png" width="800" class="center">

<p>
As a result, we get a GeoJSON with the features of interest as geometries and the observations as values. The corresponding GeoJSON schema is extended to include the meaning of each observed properties (variable names, definitions and units of measure). Since the time series are represented as a list of properties which names contain the datetime, the GeoJSON schema properties uses name templates representing a generic datetime format. The extended properties of the properties definition are defined in a metaschema that can also be saved.
<br>
<table>
<tr><td>
<textarea rows="30" cols="80" style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" readonly>
{
	"type": "FeatureCollection",
	"features": [
		{
			"type": "Feature",
			"geometry": {
				"type": "Point",
				"coordinates": [
					2.090889,
					41.473967
				]
			},
			"properties": {
				"Place": "Avinguda Cerdanyola 53",
				"PM1_2024-03-05T01:41:00Z": 30,
				"PM1_2024-03-05T01:41:10Z": 29,
				"PM1_2024-03-05T01:41:20Z": 31,
				"PM1_2024-03-05T01:41:30Z": 32,
				"PM1_2024-03-05T01:41:40Z": 31,
				"PM1_2024-03-05T01:41:50Z": 30,
				"PM1_2024-03-05T01:42:01Z": 31,
				"PM1_2024-03-05T01:42:11Z": 30,
				"PM1_2024-03-05T01:42:21Z": 30,
				"PM1_2024-03-05T01:42:31Z": 31,
				"PM1_2024-03-05T01:42:41Z": 32,
				"PM1_2024-03-05T01:42:51Z": 31,
				"PM1_2024-03-05T01:43:02Z": 31,
				"PM1_2024-03-05T01:43:12Z": 32,
				"PM1_2024-03-05T01:43:22Z": 30,
				"PM1_2024-03-05T01:43:32Z": 30,
				"PM1_2024-03-05T01:43:42Z": 31,
				"...": "...",
				"temp_2024-03-05T02:00:19Z": 21.12,
				"temp_2024-03-05T02:00:29Z": 21.12,
				"temp_2024-03-05T02:00:39Z": 21.11,
				"temp_2024-03-05T02:00:50Z": 21.12,
				"temp_2024-03-05T02:01:00Z": 21.12,
				"temp_2024-03-05T02:01:10Z": 21.11,
				"temp_2024-03-05T02:01:20Z": 21.12,
				"temp_2024-03-05T02:01:30Z": 21.09,
				"temp_2024-03-05T02:01:40Z": 21.12,
				"temp_2024-03-05T02:01:51Z": 21.11,
				"temp_2024-03-05T02:02:01Z": 21.09
			}
		}
	]
}</textarea>
</td><td>
<textarea rows="30" cols="80" style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" readonly>
{
	"$id": "https://meaning.ad4gd.eu/meaning.schema.json",
	"$schema": "https://meaning.ad4gd.eu/json-meta/meaning",
	"type": "object",
	"properties": {
		"features": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"geometry": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string"
							},
							"coordinates": {
								"type": "array"
							}
						}
					},
					"properties": {
						"type": "object",
						"properties": {
							"Place": {
								"description": "Place name",
								"mostrar": "si"
							},
							"PM1_{time?f=ISO}": {
								"description": "Particulate matter with an average aerodynamic diameter of up to 1 micrometers",
								"definition": "https://www.iqair.com/us/newsroom/pm1",
								"UoM": "Microgram per cubic meter",
								"UoMSymbol": "µg/m³",
								"UoMDefinition": "https://qudt.org/vocab/unit/MicroGM-PER-M3",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"PM10_{time?f=ISO}": {
								"description": "Particulate matter with an average aerodynamic diameter of up to 10 micrometers",
								"definition": "https://www.eea.europa.eu/help/glossary/eea-glossary/pm10",
								"UoM": "Microgram per cubic meter",
								"UoMSymbol": "µg/m³",
								"UoMDefinition": "https://qudt.org/vocab/unit/MicroGM-PER-M3",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"PM25_{time?f=ISO}": {
								"description": "Particulate matter with an average aerodynamic diameter of up to 2.5 micrometers",
								"definition": "https://www.eea.europa.eu/help/glossary/eea-glossary/pm2.5",
								"UoM": "Microgram per cubic meter",
								"UoMSymbol": "µg/m³",
								"UoMDefinition": "https://qudt.org/vocab/unit/MicroGM-PER-M3",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"RH_{time?f=ISO}": {
								"description": "Relative Humidity",
								"definition": "http://vocabs.lter-europe.net/EnvThes/21579",
								"UoM": "Percentage",
								"UoMSymbol": "%",
								"UoMDefinition": "https://qudt.org/vocab/unit/PERCENT",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"light_{time?f=ISO}": {
								"description": "Ambient Light",
								"definition": "https://qudt.org/vocab/quantitykind/LuminousExposure",
								"UoM": "Lumens per square meter",
								"UoMSymbol": "LUX",
								"UoMDefinition": "https://qudt.org/vocab/unit/LUX",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"noise_{time?f=ISO}": {
								"description": "Noise Level",
								"definition": "https://qudt.org/vocab/quantitykind/SoundExposureLevel",
								"UoM": "A-weighted decibel",
								"UoMSymbol": "dBA",
								"UoMDefinition": "https://www.eea.europa.eu/help/glossary/eea-glossary/a-weighted-decibel",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"pres_{time?f=ISO}": {
								"description": "Barometric Pressure",
								"definition": "https://vocabs.lter-europe.net/EnvThes/22060",
								"UoM": "kiloPascals",
								"UoMSymbol": "kPa",
								"UoMDefinition": "https://qudt.org/vocab/unit/KiloPA",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							},
							"temp_{time?f=ISO}": {
								"description": "Air Temperature",
								"definition": "http://vocabs.lter-europe.net/EnvThes/22035",
								"UoM": "Celsius",
								"UoMSymbol": "C",
								"UoMDefinition": "https://qudt.org/vocab/unit/DEG_C",
								"mostrar": "si",
								"serieTemporal": {
									"color": "#ff0000"
								}
							}
						}
					}
				}
			}
		}
	}
}
</textarea>
</td></tr>
</table>
<br><br><br>
<hr width="30%">
<a id="recipe04"></a>
<h3>Recipe 4: Add semantics (meaning) to a table and share, retrieve and store it</h3>
In this example, we illustrate how to manage a table semantics.

<p>
To start the exercise, need to find a CSV in the Internet. In this case, we go to the Open data portal of the Catalan Government to find a dataset of quantity of water in the Catalonia reservoirs
(<a href="https://analisi.transparenciacatalunya.cat/ca/Medi-Ambient/Quantitat-d-aigua-als-embassaments-de-les-Conques-/gn9e-3qhr/about_data" target="_blank">https://analisi.transparenciacatalunya.cat/ca/Medi-Ambient/Quantitat-d-aigua-als-embassaments-de-les-Conques-/gn9e-3qhr/about_data</a>). 
<br>
<img src="recipe04_findcsv_url.png" width="600" class="center">

<p>
There is a way to get a direct link to the data in CSV format (<a href="https://analisi.transparenciacatalunya.cat/resource/gn9e-3qhr.csv" target="_blank">https://analisi.transparenciacatalunya.cat/resource/gn9e-3qhr.csv</a>).
<br>
<img src="recipe04_copycsv_url.png" width="600" class="center">

<p>
First, we import a table from the internet using the "Import CSV" tool.
<br>
<img src="recipe04_importcsv.png" width="600" class="center">

<p>
We specify that this is a coma separated file with headers defining the titles of the fields. We do not have any <a href="https://csvw.org/">CSVW</a> to add semantics so we will not select any file name. We will copy the URL of the CSV in the last box. The file is automatically uploaded in the background.
<br>
<img src="recipe04_opencsv.png" width="600" class="center">

<p>
Now we will include the semantics with the fields meaning tool.
<br>
<img src="recipe04_fieldsMeaning.png" width="600" class="center">

<p>
We need to populate the description of each field, the URL of a vocabulary definition and the units of measure description, URL definition and symbol.
<br>
<img src="recipe04_defineMeaning.png" width="600" class="center">

<p>
That is a complicated process because it requires some knowledge of the existing vocabulary services. We can use one of the predefined exemplary combinations to start with. Do not worry if you do not know the answer of some items now as all fields are optional and can be left blank.
<br>
<img src="recipe04_dropdownhelp.png" width="600" class="center">

<p>
Once this is done for all fields, we can check if all works by visualizing the table with the table tool.
<br>
<img src="recipe04_table.png" width="600" class="center">

<p>
Field names are replaced by descriptions that are linked to the concept they represent and the units of measure are represented by a symbol linked to the definition of them.
<br>
<img src="recipe04_table_links.png" width="800" class="center">

<p>
Now, by going back to the "meaning" tool we can share this definitions in the Internet by pressing the "share" button.
<br>
<img src="recipe04_shareMeaning.png" width="600" class="center">

<p>
The NiMMbus system will be opened. You are required to login using an identity provider such as Authenix or by creating your own user name in the system. 
Do not be alarmed by the number of fields you see in the screen. They are all pre-populated, so you only need to press save and the NiMMbus system will close and you will be redirected to the TAPIS again.
<br>
<img src="recipe04_saveNiMMbus.png" width="800" class="center">

<p>
To check that all is correct, we can redraw the window to reset the status of it to zero. By adding using the ImportCSV again, we can reload the previous CSV. We will specify again that the file is coma separated and has headers. We will reenter the URL of th CSV but this time we will also select "Automatic retrieve of shared meaning". This will force the system to look for sources of meaning in the NiMMbus system and retrieve our last definition in the background, once we press "Done".
<br>
<img src="recipe04_retrieveNiMMbus.png" width="600" class="center">

<p>
We can verify that the meaning of the fields have been loaded by adding and open the "Meaning" tool again, just to see that the definitions were uploaded with no extra human interaction.
<br>
<img src="recipe04_retrievedMeaning.png" width="600" class="center">

<p>
To finalize, we can use the "Save Table" tool to save a CSVW file with the meaning definitions that we have provided as well as the original CSV for later use.
<br>
<img src="recipe04_savecsvw.png" width="600" class="center">

<p>
This is the result of saving the CSV (fragment) and the CSVW.
<table>
<tr><td>
<textarea rows="30" cols="80" style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" readonly>
{
	"tableSchema": {
		"columns": [
			{
				"name": "dia",
				"datatype": "string",
				"titles": "phenomenonTime",
				"propertyUrl": "http://www.opengis.net/def/docs/15-078r6/Observation/phenomenonTime"
			},
			{
				"name": "estaci",
				"datatype": "string",
				"titles": "Estation Name",
				"propertyUrl": "http://www.opengis.net/def/docs/15-078r6/FeatureOfInterest/name"
			},
			{
				"name": "nivell_absolut",
				"datatype": "string",
				"titles": "Lake level",
				"propertyUrl": "https://hydro.geodab.eu/hydro-ontology/concept/15",
				"unitMeasureTitles": "Meters",
				"unitMeasureSymbol": "m",
				"unitMeasureUrl": "https://qudt.org/vocab/unit/M"
			},
			{
				"name": "percentatge_volum_embassat",
				"datatype": "string",
				"titles": "Lake water volume",
				"propertyUrl": "http://hydro.geodab.eu/hydro-ontology/concept/85",
				"unitMeasureTitles": "Cubic hectometer",
				"unitMeasureSymbol": "hm3",
				"unitMeasureUrl": "http://www.ontology-of-units-of-measure.org/resource/om-2/cubicHectometre"
			},
			{
				"name": "volum_embassat",
				"datatype": "string",
				"titles": "Lake water volume",
				"propertyUrl": "http://hydro.geodab.eu/hydro-ontology/concept/85",
				"unitMeasureTitles": "Percentage",
				"unitMeasureSymbol": "%",
				"unitMeasureUrl": "https://qudt.org/vocab/unit/PERCENT"
			}
		]
	},
	"dialect": {
		"header": true,
		"delimiter": ","
	}
}
</textarea>
</td><td>
<textarea rows="30" cols="80" style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" readonly>
"dia","estaci","nivell_absolut","percentatge_volum_embassat","volum_embassat"
"2024-02-22T00:00:00.000","Embassament de la Baells (Cercs)","591.5","20","21.94"
"2024-02-22T00:00:00.000","Embassament de Sant Ponç (Clariana de Cardener)","512.44","26.9","6.55"
"2024-02-22T00:00:00.000","Embassament de Susqueda (Osor)","301.07","21.1","49.05"
"2024-02-22T00:00:00.000","Embassament de Riudecanyes","194.67","2.7","0.15"
"2024-02-22T00:00:00.000","Embassament de Foix (Castellet i la Gornal)","97.6","57.3","2.14"
"2024-02-22T00:00:00.000","Embassament de la Llosa del Cavall (Navès)","765.07","16.4","13.13"
"2024-02-22T00:00:00.000","Embassament de Sau (Vilanova de Sau)","373.12","1.9","3.08"
"2024-02-22T00:00:00.000","Embassament de Darnius Boadella (Darnius)","132.23","11.3","6.89"
"2024-02-22T00:00:00.000","Embassament de Siurana (Cornudella de Montsant)","453.89","3.2","0.39"
"2024-02-21T00:00:00.000","Embassament de Susqueda (Osor)","301.04","21","49.02"
"2024-02-21T00:00:00.000","Embassament de Riudecanyes","194.67","2.7","0.15"
"2024-02-21T00:00:00.000","Embassament de Sau (Vilanova de Sau)","373.31","2","3.25"
"2024-02-21T00:00:00.000","Embassament de la Llosa del Cavall (Navès)","765.1","16.4","13.15"
"2024-02-21T00:00:00.000","Embassament de la Baells (Cercs)","591.55","20.1","22"
"2024-02-21T00:00:00.000","Embassament de Darnius Boadella (Darnius)","132.24","11.3","6.9"
"2024-02-21T00:00:00.000","Embassament de Foix (Castellet i la Gornal)","97.63","57.6","2.16"
"2024-02-21T00:00:00.000","Embassament de Sant Ponç (Clariana de Cardener)","512.51","27","6.59"
"2024-02-21T00:00:00.000","Embassament de Siurana (Cornudella de Montsant)","453.9","3.2","0.39"
"2024-02-20T00:00:00.000","Embassament de Foix (Castellet i la Gornal)","97.63","57.7","2.16"
"2024-02-20T00:00:00.000","Embassament de Sant Ponç (Clariana de Cardener)","512.58","27.2","6.64"
"2024-02-20T00:00:00.000","Embassament de Darnius Boadella (Darnius)","132.26","11.3","6.92"
"2024-02-20T00:00:00.000","Embassament de Siurana (Cornudella de Montsant)","453.92","3.2","0.39"
"2024-02-20T00:00:00.000","Embassament de Susqueda (Osor)","301.01","21","49"
"2024-02-20T00:00:00.000","Embassament de la Llosa del Cavall (Navès)","765.15","16.5","13.18"
"2024-02-20T00:00:00.000","Embassament de Sau (Vilanova de Sau)","373.5","2.1","3.43"
"2024-02-20T00:00:00.000","Embassament de la Baells (Cercs)","591.6","20.2","22.05"
"2024-02-20T00:00:00.000","Embassament de Riudecanyes","194.68","2.7","0.15"
</textarea>
</td></tr>
</table>

<br><br><br>

<hr width="30%">
<a id="recipe05_01"></a>
<h3>Recipe 5: Selecting temperatures from an area </h3>
<h4> Recipe 5_1:Selecting temperatures with a determined polygon</h4>
In this example, we illustrate how to apply spatial and non-spatial filters (and easily generate complex queries) to extract temperatures of an area.

<p>
We will start by using the "Add STA service" tool to type the URL of the landing page of our favorite STAplus service. We will connect it to observations to get the "Observations" stored in the service.
<br>
<img src="recipe05_01_observationsTable.png" width="800" class="center">

<p>
Then we will apply the "Geospatial Filter Rows" tool to indicate that we will select observations by an area.
<br>
<img src="recipe05_01_geospatialFilter.png" width="400" class="center">

<p>
A geospatial filter requires a polygon as an input. To do that, we need to import a GeoJSON file that contains polygons. We are using an smap GeoJSON with 2 polygons called: "callus_munich.geojson" that contains 2 polygons, one in the Callus (Barcelona) area.
<br>
<img src="recipe05_01_rectangleToFilter.png" width="1000" class="center">

<p>
We need to import the GeoJSON file that contains polygons with the [Import GeoJSON] tool
<br>
<img src="recipe05_01_importGeoJSON.png" width="800" class="center">

<p>
Then, we need to select one polygon by using the "Select Row" (the one with the grey icon).
<br>
<img src="recipe05_01_selectPolygon.png" width="10a00" class="center">

<p>
Then we need to create a second connection that starts on the geopatial filter and ends on the selected polygon
<br>
<img src="recipe05_01_secondConnectionGeoFilter.png" width="400" class="center">

<p>
Now the selections is executed but still we have all observed properties mixed in the results list.
<br>
<img src="recipe05_01_geoFilteredObservations.png" width="400" class="center">

<p>
We need to concatenate the geospatial filter with a non-geospatial filter and specify that we would like to filter the observations that has an observed property with the definition "http://vocabs.lter-europe.net/EnvThes/22035".
<br>
<img src="recipe05_01_nongeospatialFilter.png" width="800" class="center">

<p>
Now all observations are temparatures<br>
<img src="recipe05_01_temperatures.png" width="400" class="center">

<p>
Finally, we can sort the observations with the more recent first.
<br>
<img src="recipe05_01_temperaturesSorted.png" width="800" class="center">
<br>
This results in thiw complex query URL: <a href="https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=geo.intersects(FeatureOfInterest/feature,geography'POLYGON ((1.78 41.78, 1.79 41.78, 1.79 41.79, 1.78 41.79, 1.78 41.78))') and ((Datastream/ObservedProperty/definition eq 'http://vocabs.lter-europe.net/EnvThes/22035'))&$orderby=phenomenonTime desc">https://citiobs.demo.secure-dimensions.de/staplus/v1.1/Observations?$filter=geo.intersects(FeatureOfInterest/feature,geography'POLYGON ((1.78 41.78, 1.79 41.78, 1.79 41.79, 1.78 41.79, 1.78 41.78))') and ((Datastream/ObservedProperty/definition eq 'http://vocabs.lter-europe.net/EnvThes/22035'))&$orderby=phenomenonTime desc</a>

<p>
Now that we have a time series we can use the scater plot tool to generate a temperature/time diagram.<br>
<img src="recipe05_01_scatterPlot.png" width="800" class="center">

<br><br><br><br>
<hr width="30%">
<a id="recipe05_02"></a>
<h4>Recipe 5_2: Selecting temperatures whose distance from a certain point is greater or lower than an established distance</h4>
In this example, we will illustrate how to apply spatial filter based on the distance between a certain point and the location of our observations.
<p>To apply this filter, we need to select an entity where we want to apply this filter (in this case, we will use Observations), the coordinates  from a point used as a reference and indicate the distance we want to use.<br>
To start, we have to indicate the STA service that we want to use by adding the "Add STA service" tool and typing there the URL of this service. We will connect it to observations to get the "Observations" stored in the service.</p>
	 
<img src="recipe05_02_observationsTable.png" width="600" class="center">
<p>Then, to apply this filter we need to select the "Filter Rows by Distance" tool.</p>
<img src="recipe05_02_applyFilterRowsByDistance.png" width="600" class="center">
<p style="text-decoration:underline">Adding a point manually</p>
<p>Let's start by adding a point manually. If we don't link any additional node, we will have a window like this.</p>
<img src="recipe05_02_applyFilterRowsByDistanceWindow.png" width="800" class="center">

<p>On the top, we have to select with which entity we want to apply the filter in our observations, and which way we want to follow. In other words, do we want to use coordinates from feature (in FeatureOfInterest) or coordinates in location (in Locations) from each of our observation to compare them with the reference point that we will choose later? In this case, we select feature from FeatureOfInterest, that there is only one way to achieve it.   </p>
<img src="recipe05_02_chooseAWay.png" width="600" class="center">
<p>In the middle, we have to write the coordinates from the reference point, the point with every observation coordinate (in this case, the feature of these observations) will be compared to to apply the filter.
At the bottom, we will indicate the distance and the operator we want to use to apply the filter. In this case we want to obtain the observations which feature is in a distance lower than 5. </p>
<img src="recipe05_02_coordinatesWithOutPoint.png" width="600" class="center">
<p> Click Ok button to see the results. The filter has been applied:</p>
<img src="recipe05_02_results.png" width="700" class="center">

<p> Now let's see different ways to indicate the reference point by linking different nodes with different sources origins. </p>
<p> In all cases, we need to take into account that nodes with only one register can be linked with the "Filter Rows by Distance" node (apart from our reference entity node where we want to apply the filter). </p>
<p style="text-decoration:underline">Using a GeoJSON to indicate the point</p>
<p>We have already prepared a GeoJSON file with the coordinates with a reference point, so now let's import it with [Import GeoJSON] tool.</p>
<img src="recipe05_02_geojsonPicture.png" width="400">
<img src="recipe05_02_importGeoJsonpng.png" width="800">
<p> As you can see below, when you link the "import GeoJSON" with "Filter Rows by Distance" you will have the same window as before, but the coordinates have been automatically added. The next steps will be as explained before, so they will be not repeated.   </p>
<img src="recipe05_02_geoJsonWindowFilterRowsByDistance.png" width="800" class="center">
<p style="text-decoration:underline">Using a service STA and FeatureOfInterest as a reference to indicate the point</p>
<p>Let's use the same STA service to choose one FeatureOfInterest. Link FeatureOfInterest node to STA service and then select only one record using "select row" (STA) to obtain only one feature. </p>
<img src="recipe05_02_STAfeatureOfInterest.png" width="800" class="center">
<img src="recipe05_02_STAfeatureOfInterestSelectedRow.png" width="800" class="center">
<p>Link this to "Filter Rows by Distance" and observe that again, you have already your point added automatically. The next steps will be as explained before, so they will be not repeated. The same procedure can be applied with Locations entity (location)</p>
<img src="recipe05_02_STAfeatureOfInterestWindow.png" width="800" class="center">
<p style="text-decoration:underline">Using a CSV to indicate the point</p>
<p>For this example, we will use a CSV containing the coordinates in two of its columns. We have chosen a totally random CSV that has this information. First of all, let's add this CSV with "Import CVS" tool.</p>
<img src="recipe05_02_CSVwindow.png" width="800" class="center">
<p> In our case, we have more than one register, so we have to select only one, with "Select Row" tool (for tables). As you can see below, in this example, columns that contain coordinates are " and "long". </p>
<img src="recipe05_02_csvSelectRow.png" width="800" class="center">
<p>After selecting one row (one register) link it to "Filter Rows by Distance".  </p>
<img src="recipe05_02_csvlinked.png" width="800" class="center">
<p>Unlike the previous cases, we have more than one column that can contain our coordinates, therefore, we will have to choose them in the selectors that will appear in "Filter Row by Distance" window. When we select the columns, its information will be added automatically. The next steps will be as explained before, so they will be not repeated. 
</p>
<img src="recipe05_02_csvfilterRowWindow.png" width="800" class="center">
<br><br><br>
<br>
<hr width="30%">
<a id="recipe05b"></a>
<h3>Recipe 5b: Selecting temperatures whose distance from a certain point is greater or lower than an established distance</h3>
In this example, we will illustrate how to apply spatial filter based on the distance between a certain point and the location of our observations.
<p>To apply this filter, we need to select an entity where we want to apply this filter (in this case, we will use Observations), the coordinates  from a point used as a reference and indicate the distance we want to use.<br>
To start, we have to indicate the STA service that we want to use by adding the "Add STA service" tool and typing there the URL of this service. We will connect it to observations to get the "Observations" stored in the service.</p>
	 
<img src="recipe05b_observationsTable.png" width="600" class="center">
<p>Then, to apply this filter we need to select the "Filter Rows by Distance" tool.</p>
<img src="recipe05b_applyFilterRowsByDistance.png" width="600" class="center">
<p style="text-decoration:underline">Adding a point manually</p>
<p>Let's start by adding a point manually. If we don't link any additional node, we will have a window like this.</p>
<img src="recipe05b_applyFilterRowsByDistanceWindow.png" width="800" class="center">

<p>On the top, we have to select with which entity we want to apply the filter in our observations, and which way we want to follow. In other words, do we want to use coordinates from feature (in FeatureOfInterest) or coordinates in location (in Locations) from each of our observation to compare them with the reference point that we will choose later? In this case, we select feature from FeatureOfInterest, that there is only one way to achieve it.   </p>
<img src="recipe05b_chooseAWay.png" width="600" class="center">
<p>In the middle, we have to write the coordinates from the reference point, the point with every observation coordinate (in this case, the feature of these observations) will be compared to to apply the filter.
At the bottom, we will indicate the distance and the operator we want to use to apply the filter. In this case we want to obtain the observations which feature is in a distance lower than 5. </p>
<img src="recipe05b_coordinatesWithOutPoint.png" width="600" class="center">
<p> Click Ok button to see the results. The filter has been applied:</p>
<img src="recipe05b_results.png" width="700" class="center">

<p> Now let's see different ways to indicate the reference point by linking different nodes with different sources origins. </p>
<p> In all cases, we need to take into account that nodes with only one register can be linked with the "Filter Rows by Distance" node (apart from our reference entity node where we want to apply the filter). </p>
<p style="text-decoration:underline">Using a GeoJSON to indicate the point</p>
<p>We have already prepared a GeoJSON file with the coordinates with a reference point, so now let's import it with [Import GeoJSON] tool.</p>
<img src="recipe05b_geojsonPicture.png" width="400">
<img src="recipe05b_importGeoJsonpng.png" width="800">
<p> As you can see below, when you link the "import GeoJSON" with "Filter Rows by Distance" you will have the same window as before, but the coordinates have been automatically added. The next steps will be as explained before, so they will be not repeated.   </p>
<img src="recipe05b_geoJsonWindowFilterRowsByDistance.png" width="800" class="center">
<p style="text-decoration:underline">Using a service STA and FeatureOfInterest as a reference to indicate the point</p>
<p>Let's use the same STA service to choose one FeatureOfInterest. Link FeatureOfInterest node to STA service and then select only one record using "select row" (STA) to obtain only one feature. </p>
<img src="recipe05b_STAfeatureOfInterest.png" width="800" class="center">
<img src="recipe05b_STAfeatureOfInterestSelectedRow.png" width="800" class="center">
<p>Link this to "Filter Rows by Distance" and observe that again, you have already your point added automatically. The next steps will be as explained before, so they will be not repeated. The same procedure can be applied with Locations entity (location)</p>
<img src="recipe05b_STAfeatureOfInterestWindow.png" width="800" class="center">
<p style="text-decoration:underline">Using a CSV to indicate the point</p>
<p>For this example, we will use a CSV containing the coordinates in two of its columns. We have chosen a totally random CSV that has this information. First of all, let's add this CSV with "Import CVS" tool.</p>
<img src="recipe05b_CSVwindow.png" width="800" class="center">
<p> In our case, we have more than one register, so we have to select only one, with "Select Row" tool (for tables). As you can see below, in this example, columns that contain coordinates are " and "long". </p>
<img src="recipe05b_csvSelectRow.png" width="800" class="center">
<p>After selecting one row (one register) link it to "Filter Rows by Distance".  </p>
<img src="recipe05b_csvlinked.png" width="800" class="center">
<p>Unlike the previous cases, we have more than one column that can contain our coordinates, therefore, we will have to choose them in the selectors that will appear in "Filter Row by Distance" window. When we select the columns, its information will be added automatically. The next steps will be as explained before, so they will be not repeated. 
</p>
<img src="recipe05b_csvfilterRowWindow.png" width="800" class="center">
<br><br><br>
<br>
<hr width="30%">
<a id="recipe06"></a>
<h3>Recipe 6: Creating two new datastream of observations</h3>
In this example, we illustrate how to store two datastreams of observations that are related in STAplus. The concrete case is a fixed camera trap that is installed in the woods and takes a short sequence of pictures of an animal that is latter identified as a particular species. The pictures are stored and described in a datastream and the identification (occurrence) of the species is stored in another datastream. Each small set of pictures and the occurrence is grouped in an observation group.   

<p>
Commonly you cannot write in a STA service without permissions. The first think that we need is order to be able to write in the STA service using the login button<br>
<img src="recipe06_loginButton.png" width="600" class="center">

<p>
The login mechanims in TAPIS is called Authenix. Authenix does not manage users. Instead it uses preexisting user names created in other platforms. In the Authenix window select your platform or institution integrated in Edugain and follow the instructions to login. If you are previously logged in the Authenix window will open and close with no need for interaction.
<br>
<img src="recipe06_authenix.png" width="400" class="center">

<p>
Your name and organization will appear on the left hand side of the <i>control area</i>.
<br>
<img src="recipe06_loginUser.png" width="600" class="center">

<p>
Now select the <i>Add STA service</i> button and select a STA service where you have writing rights.
<br>
<img src="recipe06_STAplus.png" width="600" class="center">

<p>
Since the camera trap is owned by the same person that owns the pictures and does the identifiacion, we will start by creating a single <i>Party</i> for everthing. Do not worry, if the party already exists it will be retrieved instead. A right click on the STAplus will open a context menu to select <i>Party</i>. (please note that you should select the family of bottons with the entity names in singular that have a icon with a little pencil.
<br>
<img src="recipe06_partyButton.png" width="600" class="center">

<p>
The creation of a Party is particularly easy, as it takes the authId from the authetication process and no need to add any extra information. You only need to press [Create]. Again, do not worry, if the party already exists it will be retrieved instead.
<br>
<img src="recipe06_party.png" width="600" class="center">

<p>
The information area will show the identified of the created or retreived Party.
<br>
<img src="recipe06_partyCreated.png" width="600" class="center">

<p>
The Query and Table area will show the description of the Party.
<br>
<img src="recipe06_partyTable.png" width="600" class="center">

<p>
The same procedure can be used to create an <i>ObservedProperty</i>. In this case, we start by creating the identification (occurrence) observed property. You should populate the requered information before pressing [Create]. In particular we use the Species definition in GBIF as URI definition (https://en.wikipedia.org/wiki/Image).
<br>
<img src="recipe06_observedPropertyCreation.png" width="600" class="center">

<p>
The other observedProperty is the Picture itself. In this case, you should populate the requered information before pressing [Create]. To make things simple, we use the wikipedia definition of an image (https://en.wikipedia.org/wiki/Image).
<br>
<img src="recipe06_pictureObservedPropertyCreation.png" width="600" class="center">

<p>
Now we can create a <i>Location</i> where the <i>Thing</i> is placed. In this case this is the position of a Camera trap. Again, you should populate the requered information including the position (in this case represented by a point) before pressing [Create]. The encodingType property is fixed to application/geo+json.
<br>
<img src="recipe06_locationCreation.png" width="600" class="center">

<p>
Once the <i>Location</i> and the <i>Party</i> are created, it is possible to create a <i>Thing</i> that is connected to both elements. By right clicking in the Location and selecting the [Thing] botton we have the first connection and the second connection can be done using the [Connect two nodes] button. In this case this is the Camera trap itself. In the window, the connections to both objects are indicated and you should populate the requered information only a name and a description before pressing [Create].
<br>
<img src="recipe06_thingCreation.png" width="600" class="center">

<p>
The second <i>Thing</i> that we will need is the Citizen itself, that has an irrelevant location when the identification was done (probably at home reviewing the pictures downloaded from the camera trap. By right clicking in the STA plus, we will select the [Thing] botton and create a second connection using the [Connect two nodes] button to the Party. In the window, the connections to both objects are indicated and you should populate the requered information only a name and a description before pressing [Create]. The illustration shows the result of it.
<br>
<img src="recipe06_CitizenThingCreation.png" width="600" class="center">

<p>
Now two <i>Sensors</i> are created, the first one for the human sensor. By right clicking in the STA plus and selecting the [Sensor] botton. In the window, you should populate the requered information only a name and a description before pressing [Create].
<br>
<img src="recipe06_humanSensorCreation.png" width="600" class="center">

<p>
The second <i>Sensor</i> is the optics and CCD inside the camera trap. By right clicking in the STA plus and selecting the [Sensor] botton. In the window, you should populate the requered information only a name and a description before pressing [Create].
<br>
<img src="recipe06_cameraSensorCreation.png" width="600" class="center">

<p>
Some Creative Commons licenses are already created in the STA plus, so in this case we will use the <i>Licenses</i> to request all the licences in the STA. Then by right clicking in the <i>Licenses</i> we will add the Select Row tool (the one with a blue icon) and by doubleclicking in it, we can select the license we want. In this case, we will select CC-BY.
<br>
<img src="recipe06_cc-bySelection.png" width="600" class="center">

<p>
Now we have all the elements necessary to create two DataStreams. 
DataStream is a complicated object that is connected to <i>Sensor</i>, <i>Thing</i>, <i>ObservedProperty</i>, <i>Party</i> and <i>License</i>. 
This can be a bit confusing so, before starting, we will organize the entities that are related to the "camera/picture" in on side (to the top, in the illustration) 
and the ones related with "citizen/identification" on the other side (to the bottomin the illustration). 
Then, we will start by right clicking in one of the entities related to the "camera/picture" and selecting <i>Datastream</i>, and using the "Connect node" botton for generating the other four connections.
By doubleclicking in the <i>Datastream</i> we will see the five relations and you should populate the requered information; in our case only a name and a description (due to, there is no units of measure in this case) before pressing [Create].
<br>
<img src="recipe06_picturesDatastreamCreation.png" width="600" class="center">

<p>
Now, we will start by right clicking in one of the entities related to the "human/identification" and selecting <i>Datastream</i>, and using the "Connect node" botton for generating the other four connections.
<br>
<img src="recipe06_connectNodeDatastreamCreation.png" width="600" class="center">

<p>
By doubleclicking in the <i>Datastream</i> we will see the five relations and you should populate the requered information before pressing [Create].
<br>
<img src="recipe06_occurrenceDatastreamCreation.png" width="600" class="center">

<p>
Now, everything is prepared for illustrating how to create the observations. We should start by creating one ObservationGroup that will be connected to occurrence observations and image observations. This entity can be connected at least to the <i>Party</i> and <i>License</i>. You should populate the requered information before pressing [Create]. 
<br>
<img src="recipe06_observationGroupCreation.png" width="600" class="center">

<p>
We cannot start creating observations without a <i>FeatureOfInterest</i>. Since the FeatureOfInterest can not be connected to anything, it should be created by right clicking on the <i>STA plus</i> entity. You should populate the requered information, including the coordinates of the occurrence before pressing [Create].
<br>
<img src="recipe06_featureOfInterestCreation.png" width="600" class="center">

<p>
Now all the elements to be connected to observations are there. To create a "picture" observation you can right click the ObservationGroup and select the <i>Observation</i>. Then we should connect the Observation to the <i>FeatureOfInterest</i> and <i>Datastream</i> related to "camera/images".
<br>
<img src="recipe06_linkPictureObservationCreation.png" width="600" class="center">

<p>
You should populate the requered information before pressing [Create], being the most important the "result".
<br>
<img src="recipe06_pictureObservationCreation.png" width="600" class="center">

<p>
In this case, the "result" is the full URL of the picture that was previously stored in a external repository and the phenomenonTime is the time when the picture was taken.
<br>
<img src="recipe06_pictureObservationResult.png" width="300" class="center">

<p>
To create a "occurrence" observation you can right click the ObservationGroup and select the <i>Observation</i>. Then we should connect the Observation to the <i>FeatureOfInterest</i> and <i>Datastream</i> related to "identifications/occurrences".
<br>
<img src="recipe06_linkOccurObservationCreation.png" width="600" class="center">

<p>
By doubleclicking in the observation, you should populate the requered information before pressing [Create].
<br>
<img src="recipe06_occurObservationCreation.png" width="600" class="center">

<p>
In this case, the "result" the full URL of the species name in GBIF (https://www.gbif.org/species/7193910), and the phenomenonTime is the time when the picture was taken and the occurrence happened.
<br>
<img src="recipe06_occurObservationResult.png" width="1000" class="center">

<p>
You can add as many Observations and ObservationGroups as needed repeating the same procedure.

<P>
A partial result of the created observation group can be retrieved from the following query: <a href="https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)?$expand=Observations($select=result,phenomenonTime;$expand=Datastream($select=description;$expand=ObservedProperty($select=description)))" target="_blank">https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)?$expand=Observations($select=result,phenomenonTime;$expand=Datastream($select=description;$expand=ObservedProperty($select=description)))</a>

<textarea rows="30" cols="80" style="white-space: pre; overflow-wrap: normal; overflow-x: scroll;" readonly>
{
  "@iot.selfLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)",
  "@iot.id": 232753,
  "name": "GatFerOcc1",
  "description": "Felis silvestris Occurrence 1",
  "creationTime": "2024-07-12T17:30:00Z",
  "endTime": "2024-07-12T17:30:00Z",
  "Observations": [
    {
      "result": "https://www.infoambiental.grumets.cat/AD4GD_CameraTrap/20240712_1930_C3/20240712_1930_C3_04.JPG",
      "phenomenonTime": "2024-07-12T17:30:00Z",
      "Datastream": {
        "description": "Pictures with an animal inside",
        "ObservedProperty": {
          "description": "Pictorial image"
        }
      }
    },
    {
      "result": "https://www.gbif.org/species/7193910",
      "phenomenonTime": "2024-07-12T17:30:00Z",
      "Datastream": {
        "description": "Species occurrence",
        "ObservedProperty": {
          "description": "Species Name"
        }
      }
    }
  ],
  "License@iot.navigationLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)/License",
  "Party@iot.navigationLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)/Party",
  "Campaigns@iot.navigationLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)/Campaigns",
  "Observations@iot.navigationLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)/Observations",
  "Relations@iot.navigationLink": "https://citiobs.demo.secure-dimensions.de/staplustest/v1.1/ObservationGroups(232753)/Relations"
}
</textarea>

<br><br><br>
<br>
<hr width="30%">
<a id="recipe07"></a>
<h3>Recipe 7: Connecting to a data catalogue and giving user feedback about a dataset</h3>
In this example, we illustrate how to connect to a catalogue of metadata using the OGC CSW standard. Then we can select a dataset, look at it and explore the geospatial user feedback of input a new eedback about about it.

<p>
First we connect to the GeoNetwork AD4GD catalogue.<br>
<img src="recipe07_catalogue.png" width="600" class="center">
<p>

The result is a table with a list of record in the catalogue that have data associated with it.<br>
<img src="recipe07_catalogueTable.png" width="600" class="center">
<p>

We can select one of these records with the [select row] tool.<br>
<img src="recipe07_catalogueSelectRow.png" width="600" class="center">
<p>

Now, depending on the format we can select a tool to open the file. In this case we use the [ImportCSV]. By double-clicking in the tool, we can immediately open the resource without having to write the URL of the resource. We only need to press the two [load] buttons next to the URLs.<br>
<img src="recipe07_importCSVTable.png" width="1000" class="center">
<p>

The table can be examine and analyce. In this case, we can do groupBy statistics to know about the number of occurrences per species selecting the species boht as GroupBy and as Attributes to aggregate and using the "count defined" aggregation. The results is a little table with two columns one with the species name and another with the number of occurrences per species.<br>
<img src="recipe07_groupBy.png" width="800" class="center">
<p>

Then we can create a <b>bar chart</b> that reprensents the table by selecting the <i>species</i> as categories and the <i>countDefined</i> as values. We can easily see that the <i>Mustela putorius</i> is the <i>species</i> with more registered occurences.<br> 
<img src="recipe07_barChart.png" width="1000" class="center">
<p>

Now we can report our little "finding" as geospatial user feedback. First, we need to connect the 'Feedback' tool to the 'Select row' element that contains the selected dataset record in the catalogue. By double clicking the GUF tool we can press the [Add feedback] botton.<br>
<img src="recipe07_GUF.png" width="1000" class="center">
<p>

The interface of the Nimmbus system is called. After logging in the system is possible to report our "finding" as a "comment". We have to press [Save] to send the feedback to the feedback database and close the window.<br>
<img src="recipe07_GUFCreation.png" width="1000" class="center">
<p>

To verify that the feedback is collected and recorded, we can use the button [Get feedback] to get the stored feedback as table (with only one row if there was no previous feedback.<br>
<img src="recipe07_GUFGetFeedback.png" width="1200" class="center">
<p>

To read the record better, we can use the [Edit record] to see the item as a record in a form.<br>
<img src="recipe07_GUFFeedbackItem.png" width="600" class="center">
<p>

<br><br><br>
<br>
<hr width="30%">
<a id="recipe08"></a>
<h3>Recipe 8: Connecting to a S3 service and retreive and view a CSV file in a S3 bucket</h3>
In this example, we illustrate how to connect to a S3 service. Then we can select a S3 bucket, load the content of the S3 bucket, select a CSV file in it and show its content.

<p>
First we connect to the S3 service.<br>
<img src="recipe08_s3Service.png" width="600" class="center">
<p>

The result is a table with a list of buckets offered.<br>
<img src="recipe08_backetsTable.png" width="600" class="center">
<p>

We can select one of these records with the [select row] tool.<br>
<img src="recipe08_backetsSelectRow.png" width="600" class="center">
<p>

<p>
Now we need to load the bucket with the [S3 bucket] tool.<br>
<img src="recipe08_s3backet.png" width="600" class="center">
<p>

The result is a table with a list of files offered. Note that the folder structure has been flattened and the name of the files contain the name of the folder directly.<br>
<img src="recipe08_filesTable.png" width="600" class="center">
<p>

We can select one of these files with the [select row] tool.<br>
<img src="recipe08_filesSelectRow.png" width="800" class="center">
<p>

Now, depending on the format we can select a tool to open the file. In this case we use the [ImportCSV]. By double-clicking in the tool, we can immediately open the resource without having to write the URL of the resource. We only need to press the two [load] buttons next to the URLs.<br>
<img src="recipe08_importCSVTable.png" width="1000" class="center">
<p>

<br><br><br>
<br>
<hr width="30%">
<a id="recipe09"></a>
<h3>Recipe 9: Drawing a stacked bar chart</h3>
In this example, we illustrate how to create a stacked plot counting records by two criteria.

<p>
First we load a table as CSV.<br>
<img src="recipe09_openCSV.png" width="600" class="center">
<p>

We select the [Group By] tool.<br>
<img src="recipe09_groupBy.png" width="200" class="center">
<p>

We select grouping by two columns: "Need Type" and "Area". We select to aggregate the column "User requirement id" and we request the "Count defined" as operation.<br>
<img src="recipe09_groupByDlg.png" width="600" class="center">
<p>

The result is a table that has 3 columns. The thirt column represent the number of records that has the same "Need Type" and "Area".<br>
<img src="recipe09_groupByResult.png" width="400" class="center">
<p>

We select the [Bar plot] tool and we ask for Categories (the bar labels) "Need Type", the Classifications (the data series names that are going to be stacked segements in diferent colors in the bar chart) as "Area" and the Values (the size of the segments of the bars in the chart) as "User requirement id_CouldDefined". After presing "plot, you will see the actual stacked bar chart.<br>
<img src="recipe09_StackedBarChart.png" width="900" class="center">
<p>


</body>
</html>