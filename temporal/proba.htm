<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="../tapis.css">
	<link href=".../tools.css" rel="stylesheet" type="text/css">
</head>

<body>


	<label>Date:</label> <input type="text" id="createEntityInputDate"
		onChange="addTimeToOtherInputCreateEntities('createEntityInputDate','createEntityInputCalendar' )">
	<br><label>Generate with this: </label><input type="datetime-local" id="createEntityInputCalendar"
		onChange="addTimeToOtherInputCreateEntities('createEntityInputCalendar','createEntityInputDate')">



	<script>
		function GetCreateEntity(event) {
			event.preventDefault(); // We don't want to submit this form

			var node = currentNode;

			var parentNodes = GetParentNodes(node);
			if (parentNodes.length == 0)
				return;

			var entityName = getSTAEntityPlural(document.getElementById("dlgCreateUpdateDeleteEntityType").innerHTML)
			var url = getSTAURLRoot(parentNodes[0].STAURL);
			var obj = {};

			//Entities

			if (currentNode.STAEntitiesRequiredNotLinked.length == 0) {
				for (var i = 0; i < parentNodes.length; i++) {
					var parentNode = parentNodes[i];
					if (parentNode.image == "sta.png")
						continue;
					if (i != 0 && getSTAURLRoot(parentNode.STAURL) != url) {
						alert("Not all parent nodes are from the same root URL: " + getSTAURLRoot(parentNode.STAURL) + ", " + url);
						continue;
					}

					var parentEntityName = getSTAEntityPlural(getSTAURLLastEntity(parentNode.STAURL), true);
					var entity;
					if (returnIndexEntityRelatedInSTAEntity(entityName, parentEntityName) != -1)
						entity = parentEntityName;
					else if (returnIndexEntityRelatedInSTAEntity(entityName, STAEntities[parentEntityName].singular) != -1)
						entity = STAEntities[parentEntityName].singular;
					else {
						alert("Parent node (" + STAEntities[parentEntityName].singular + ") is not directly related to a/an " + STAEntities[entityName].singular);
						continue;
					}

					if (!parentNode.STAdata || parentNode.STAdata.length == 0) {
						alert("Parent node has no STA data associated");
						return;
					}
					if (parentNode.STAdata.length > 1) {
						alert("Parent node '" + STAEntities[parentEntityName].singular + "' has more than a single record. Please select a record first.");
						return;
					}
					//var record = parentNode.STAdata[0];
					// if (!record["@iot.id"]){
					// 	alert("Cannot find @iot.id. Did you removed in a select?");
					// 	return;
				}
				// if (obj[entity]){  //add to a plural array
				// 	if (entity==STAEntities[parentEntityName].singular){
				// 		alert("An element '"+STAEntities[entityName].singular+"' can not have more than one '"+parentEntityName+"' Associated. One the first will be considered.");
				// 		continue;
				// 	}					
				// 	obj[parentEntityName].push({"@iot.id": record["@iot.id"]});
				// }
				// else if (entity==STAEntities[parentEntityName].singular)
				// 	obj[STAEntities[parentEntityName].singular] = {"@iot.id": record["@iot.id"]}
				// else  //Add to a plural element
				// 	obj[parentEntityName]=[{"@iot.id": record["@iot.id"]}];
				//}
				// }

				//Properties
				var obj = obtainDataInEntitiesCreationAndUpdate("create");
				// var prop, allowToSend=true;
				// for (var i=0; i<STAEntities[entityName].properties.length; i++) {
				// 	if ((entityName=="Observations" ? STAEntities[entityName].properties[i].name=="parameters" : STAEntities[entityName].properties[i].name=="properties") || 
				// 		((entityName=="Datastreams" || entityName=="MultiDatastreams") && (STAEntities[entityName].properties[i].name=="observedArea" || STAEntities[entityName].properties[i].name=="phenomenonTime" || STAEntities[entityName].properties[i].name=="resultTime")))
				// 		continue;
				// 	if ((entityName=="Locations" && STAEntities[entityName].properties[i].name=="location") || 
				// 	    (entityName=="FeaturesOfInterest" && STAEntities[entityName].properties[i].name=="feature"))
				// 	{
				// 		//For the moment in supporting only a point
				// 		obj[STAEntities[entityName].properties[i].name]={"type": "Point", "coordinates": []};
				// 			if (document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_longitude").value==""&& document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_longitude").getAttribute("data-starequired")=="true"){
				// 				alert("Longitude parameter is required, please fill in the box before send");
				// 				allowToSend=false;
				// 			}else{
				// 		obj[STAEntities[entityName].properties[i].name].coordinates[0]=parseFloat(document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_longitude").value);
				// 			}

				// 			if (document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_latitude").value==""&& document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_latitude").getAttribute("data-starequired")=="true"){
				// 				alert("Latitude parameter is required, please fill in the box before send");
				// 				allowToSend=false;
				// 			}else{
				// 		obj[STAEntities[entityName].properties[i].name].coordinates[1]=parseFloat(document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name+"_latitude").value);
				// 			}

				// 		continue;	
				// 	}
				// 		if (entityName=="Datastreams" && STAEntities[entityName].properties[i].name=="unitOfMeasurement")
				// 	{

				// 			obj[STAEntities[entityName].properties[i].name]={};
				// 			obj[STAEntities[entityName].properties[i].name].name=document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_name").value ? document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_name").value : null;
				// 			obj[STAEntities[entityName].properties[i].name].name=document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_symbol").value ? document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_symbol").value : null;					
				// 			obj[STAEntities[entityName].properties[i].name].name=document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_definition").value ? document.getElementById("dlgCreateUpdateDeleteEntity_" + STAEntities[entityName].properties[i].name + "_definition").value : null;					
				// 		continue;
				// 	}
				// 		if (STAEntities[entityName].properties[i].name=="multiObservationDataType"){
				// 			var textArea=document.getElementById("dlgCreateUpdateDeleteEntity_multiObservationDataType_textAreaList");
				// 			if (textArea.value==""&& textArea.getAttribute("data-starequired")=="true"){
				// 				alert("multiObservationDataType parameter is required, please fill in the box before send");
				// 				allowToSend=false;

				// 			}else{
				// 				var valueSplited= textArea.value.split(";")
				// 				obj[STAEntities[entityName].properties[i].name]=valueSplited;
				// 			}
				// 			continue;
				// 		}


				// 	prop=document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name).value;
				// 		if (prop!=="") 	obj[STAEntities[entityName].properties[i].name]=(entityName=="Observations" && STAEntities[entityName].properties[i].name=="result" && !isNaN(prop)) ? parseFloat(prop) : prop;
				// 		else if (prop=="" && document.getElementById("dlgCreateUpdateDeleteEntity_"+STAEntities[entityName].properties[i].name).getAttribute("data-starequired")=="true") {
				// 			alert( STAEntities[entityName].properties[i].name+" parameter is required, please fill in the box before send");
				// 			allowToSend=false;
				// 			break;
				// 		}

				// 	}
				if (obj != false) {
					document.getElementById("DialogCreateUpdateDeleteEntity").close();
					showInfoMessage("Creating a/an " + STAEntities[entityName].singular + "...");
					GetObjectId(url, entityName, obj).then(
						function (value) {
							if (value) {
								document.getElementById("DialogCreateUpdateDeleteEntity").close();
								showInfoMessage('Available at: <a href="' + getUrlToId(url, entityName, value) + '" target="_blank">' + value + '</a>');
								node.STAURL = getUrlToId(url, entityName, value);
								node.STAdata = [];
								node.STAdata.push(obj);
								node.STAdata[0]["@iot.id"] = isNaN(value) ? value : parseInt(value);
								networkNodes.update(node);
							}
						},
						function (error) {
							showInfoMessage('Error creating entity. <br>name: ' + error.name + ' message: ' + error.message + ' at: ' + error.at + ' text: ' + error.text);
							console.log(error);
						}
					);
				}

			} else {
				alert("You need to Link entities required to create the new entity")
			}
		}

	</script>
</body>

</html>