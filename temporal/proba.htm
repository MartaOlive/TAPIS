<html>

<head>
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
	<meta content="utf-8" http-equiv="encoding">
	<title>Graph2d | Basic Example</title>



	<link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.15.1/vis.min.css" rel="stylesheet" type="text/css" />


	<script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.15.1/vis.min.js"></script>
	<style type="text/css">
		body,
		html {
			font-family: sans-serif;
		}

		.vis-graph-group0 {
			fill: #bdb24f;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #b6c52b
		}

		.vis-graph-group1 {
			fill: #f79646;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #f79646
		}

		.vis-graph-group2 {
			fill: #8c51cf;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #8c51cf
		}

		.vis-graph-group3 {
			fill: #75c841;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #75c841
		}

		.pepito {
			fill: #ff0100;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #00ff37
		}

		.vis-graph-group5 {
			fill: #37d8e6;
			fill-opacity: 0;
			stroke-width: 2px;
			stroke: #37d8e6
		}
	</style>

	<h2>Graph2d | Basic Example</h2>
	<br />
	<input type="color" id="selectColor" value="#f79646" style="width:20px; height:22px">
	<button onclick="canviaColor()">canvia</button>
	<div id="visualization"></div>


	<script type="text/javascript">
		var container = document.getElementById('visualization');
		var names = ['graph1', 'graph2'];
		var groups = new vis.DataSet();
		groups.add({
			id: 0,
			className: 'pepito',
			options: {
				yAxisOrientation: 'left',
				drawPoints: {
					style: 'point' // square, circle
				},

			}
		});
		groups.add({
			id: 1,
			className: 'vis-graph-group2',
			options: {
				yAxisOrientation: 'right', // right, left
				drawPoints: {
					style: 'circle' // square, circle
				},

			}
		});

		groups.add({
			id: 3,
			className: 'pepito',
			options: {
				yAxisOrientation: 'left',
				drawPoints: {
					style: 'point', // square, circle

				},

			}
		});
		groups.add({
			id: 4,
			className: 'vis-graph-group3',
			options: {
				yAxisOrientation: 'right', // right, left
				drawPoints: {
					style: 'circle', // square, circle

				},

			}
		});

		var items = [
			{ x: new Date(1469626499397), y: 110, group: 0 },
			{ x: new Date(1469626499497), y: 125, group: 0 },
			{ x: new Date(1469626499597), y: 130, group: 0 },
			{ x: new Date(1469626499697), y: 210, group: 0 },
			{ x: new Date(1469626499897), y: 115, group: 0 },
			{ x: new Date(1469626499997), y: 330, group: 0 },
			{ x: new Date(1469626499397), y: 1, group: 1 },
			{ x: new Date(1469626499597), y: 2, group: 1 },
			{ x: new Date(1469626499697), y: 3, group: 1 },
			{ x: new Date(1469626499797), y: 10, group: 1 },
			{ x: new Date(1469626499897), y: 15, group: 1 },
			{ x: new Date(1469626499997), y: 10, group: 1 },
			{ x: new Date(1469626499397), y: 100, group: 3 },
			{ x: new Date(1469626499497), y: 110, group: 3 },
			{ x: new Date(1469626499597), y: 110, group: 3 },
			{ x: new Date(1469626499697), y: 115, group: 3 },
			{ x: new Date(1469626499897), y: 115, group: 3 },
			{ x: new Date(1469626499997), y: 130, group: 3 },
			{ x: new Date(1469626499397), y: 3, group: 4 },
			{ x: new Date(1469626499597), y: 4, group: 4 },
			{ x: new Date(1469626499697), y: 5, group: 4 },
			{ x: new Date(1469626499797), y: 17, group: 4 },
			{ x: new Date(1469626499897), y: 15, group: 4 },
			{ x: new Date(1469626499997), y: 10, group: 4 },
			{ x: new Date(1469626499397), y: 9, group: 4 },
		];

		var dataset = new vis.DataSet(items);
		var options = { //OPCIONS GENERALS 
			height: 500,
			//graphHeight:1500,
			drawPoints: true,
			dataAxis: {
				right: {
					range: { min: -1, max: 20 }
					//title{text:""} llegenda

				},
				left: {
					range: { min: 100, max: 500 }
				},
				icons: true
			},
		};
		var graph2d = new vis.Graph2d(container, dataset, groups, options);

	



		function canviaColor() {
			event.preventDefault();
			var colorValue = document.getElementById("selectColor").value;
			//crearClasseCSS(classe, regles)
			console.log(colorValue)
		}

		// Funció per crear una classe CSS dinàmica
		function crearClasseCSS(classe, regles) {
			// Crear un element <style>
			var style = document.createElement('style');
			style.innerHTML = `${classe} { ${regles} }`;

			// Afegir-ho a la capçalera del document
			document.head.appendChild(style);
		}

		// Crear una classe CSS dinàmica
		//crearClasseCSS('.dinamica', 'background-color: yellow; color: red; padding: 10px;');

		// Aplicar la classe CSS al botó
		// document.getElementById('btn').classList.add('dinamica');


		function createDialogWithSelectWithGroupsScatterPlot(node) {
			var scatterPlotDiv = document.getElementById("DialogScatterPlotDiv");
			scatterPlotDiv.innerHTML = "";
			var groups = node.STAattributesToSelect.dataGroups;
			var attributesToSelect = node.STAattributesToSelect.selectOptions;
			var attributesToSelectKeys = Object.keys(attributesToSelect);

			var cdns = `<button onclick="addNewSelectGroupInScatterPlot('${node.id}')"> Add new data group</button>`

			for (var i = 0; i < groups.length; i++) { //dialog groups of data
				cdns += `<fieldset><legend>Serie ${i + 1}</legend><select>`

				for (var u = 0; u < attributesToSelectKeys.length; u++) {
					cdns += `<option value="${attributesToSelectKeys[u]}" ${(groups[i].nodeSelected == attributesToSelectKeys[u]) ? "selected=true" : ""}>${node.STAattributesToSelect.selectOptions[attributesToSelectKeys[u]].label}</option>`
				}
				cdns += `<select>
				<label>Axis X</label><br><select name="DialogScatterPlotAxisXSelect_${i}" id="DialogScatterPlotAxisXSelect_${i}" style="" onchange="updateSelectInformationScatterPlot('${i}','X','${node.id}')">`

				for (var e = 0; e < attributesToSelect[groups[i].nodeSelected].attr.length; e++) { //Select X
					cdns += `<option value="${attributesToSelect[groups[i].nodeSelected].attr[e]}"`;
					if (node.STAattributesToSelect.dataGroups[i].X == attributesToSelect[groups[i].nodeSelected].attr[e]) cdns += " selected=true "; //checked option
					cdns += `>${attributesToSelect[groups[i].nodeSelected].attr[e]}</option>`
				}

				cdns += `</select><br>
				<label>Axis Y</label><br><select name="DialogScatterPlotAxisYSelect_${i}" id="DialogScatterPlotAxisYSelect_${i}" style="" onchange="updateSelectInformationScatterPlot('${i}','Y','${node.id}')">`
				for (var e = 0; e < attributesToSelect[groups[i].nodeSelected].attr.length; e++) { //Select X
					cdns += `<option value="${attributesToSelect[groups[i].nodeSelected].attr[e]}"`;
					if (node.STAattributesToSelect.dataGroups[i].Y == attributesToSelect[groups[i].nodeSelected].attr[e]) cdns += " selected=true "; //checked option
					cdns += `>${attributesToSelect[groups[i].nodeSelected].attr[e]}</option>`
				}

				cdns += `</select><br>
					<input type='radio'id="DialogScatterPlotAxisYRadioButton_Left_${i}"  name="DialogScatterPlotAxisYRadioButton_${i}"${(node.STAattributesToSelect.dataGroups[i].selected == "left") ? "checked" : ""} onclick="updateCheckInformationScatterPlot('${i}','left','${node.id}')" </input><label>Left axis</label><br>
					<input type='radio'id="DialogScatterPlotAxisYRadioButton_Right_${i}" name="DialogScatterPlotAxisYRadioButton_${i}" ${(node.STAattributesToSelect.dataGroups[i].selected == "right") ? "checked" : ""} onclick="updateCheckInformationScatterPlot('${i}','right','${node.id}')"</input><label>Right axis</label><br>
					<button onclick="deleteSelectGroupInScatterPlot('${node.id}', '${i}')"><img src="trash.png" alt="Remove" title="Remove"></button></fieldset>`
			}
			scatterPlotDiv.innerHTML = cdns;
		}






	</script>
	</body>

</html>