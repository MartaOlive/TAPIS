<html>

<head>
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
	<meta content="utf-8" http-equiv="encoding">
	<title>Graph2d | Basic Example</title>

	<style type="text/css">
		body,
		html {
			font-family: sans-serif;
		}
	</style>

	<link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.15.1/vis.min.css" rel="stylesheet" type="text/css" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.15.1/vis.min.js"></script>

<body>
	<h2>Graph2d | Basic Example</h2>
	<br />
	<div id="visualization"></div>


	"<optgroup label="Joan">
		<option value="1u5qc.scsf8hg_@iot.id">@iot.id</option>
		<option value="1u5qc.scsf8hg_phenomenonTime">phenomenonTime</option>
		<option value="1u5qc.scsf8hg_resultTime">resultTime</option>
		<option value="1u5qc.scsf8hg_result">result</option>
	</optgroup>
	<optgroup label="Ivette">
		<option value="4m2lo.jb97cl_@iot.id">@iot.id</option>
		<option value="4m2lo.jb97cl_phenomenonTime">phenomenonTime</option>
		<option value="4m2lo.jb97cl_resultTime">resultTime</option>
		<option value="4m2lo.jb97cl_result">result</option>
	</optgroup>"
	<script type="text/javascript">
		var container = document.getElementById('visualization');
		var names = ['graph1', 'graph2'];
		var groups = new vis.DataSet();
		groups.add({
			id: 0,
			className: '',
			options: {
				yAxisOrientation: 'left',
				drawPoints: {
					style: 'point' // square, circle
				}
			}
		});
		groups.add({
			id: 1,
			className: '',
			options: {
				yAxisOrientation: 'right', // right, left
				drawPoints: {
					style: 'circle' // square, circle
				}
			}
		});

		groups.add({
			id: 3,
			className: '',
			options: {
				yAxisOrientation: 'left',
				drawPoints: {
					style: 'point' // square, circle
				}
			}
		});
		groups.add({
			id: 4,
			className: '',
			options: {
				yAxisOrientation: 'right', // right, left
				drawPoints: {
					style: 'circle' // square, circle
				}
			}
		});

		var items = [
			{ x: new Date(1469626499397), y: 110, group: 0 },
			{ x: new Date(1469626499497), y: 125, group: 0 },
			{ x: new Date(1469626499597), y: 130, group: 0 },
			{ x: new Date(1469626499697), y: 210, group: 0 },
			{ x: new Date(1469626499897), y: 115, group: 0 },
			{ x: new Date(1469626499997), y: 130, group: 0 },
			{ x: new Date(1469626499397), y: 1, group: 1 },
			{ x: new Date(1469626499597), y: 2, group: 1 },
			{ x: new Date(1469626499697), y: 3, group: 1 },
			{ x: new Date(1469626499797), y: 10, group: 1 },
			{ x: new Date(1469626499897), y: 15, group: 1 },
			{ x: new Date(1469626499997), y: 10, group: 1 },
			{ x: new Date(1469626499397), y: 100, group: 3 },
			{ x: new Date(1469626499497), y: 110, group: 3 },
			{ x: new Date(1469626499597), y: 110, group: 3 },
			{ x: new Date(1469626499697), y: 115, group: 3 },
			{ x: new Date(1469626499897), y: 115, group: 3 },
			{ x: new Date(1469626499997), y: 130, group: 3 },
			{ x: new Date(1469626499397), y: 3, group: 4 },
			{ x: new Date(1469626499597), y: 4, group: 4 },
			{ x: new Date(1469626499697), y: 5, group: 4 },
			{ x: new Date(1469626499797), y: 17, group: 4 },
			{ x: new Date(1469626499897), y: 15, group: 4 },
			{ x: new Date(1469626499997), y: 10, group: 4 },
			{ x: new Date(1469626499397), y: 9, group: 4 },
		];

		var dataset = new vis.DataSet(items);
		var options = {
			height: 500,
			//graphHeight:1500,
			drawPoints: true,
			dataAxis: {
				right: {
					range: { min: -1, max: 20 }
				},
				left: {
					range: { min: 100, max: 250 }
				},
				icons: true
			},
		};
		var graph2d = new vis.Graph2d(container, dataset, groups, options);

		var objecte = {
			"type":
				"Feature",
			"geometry": {
				"type": "Point",
				"coordinates": [22.951011, 40.595293]
			}, "properties": {}
		}
		function searchCoordinatesInFeature(objectToEvaluate, propertyToSearch, inputName) { //feature or location
			if (typeof objectToEvaluate === "object") {
				if (propertyToSearch == "type") {
					if (objectToEvaluate.hasOwnProperty(propertyToSearch)) { //type is a property
						if (typeof objectToEvaluate.type === "string") {
							if (objectToEvaluate.type == "Point") {
								if (objectToEvaluate.hasOwnProperty("coordinates")) {//coordinates at same level
									searchCoordinatesInFeature(objectToEvaluate, "coordinates", inputName);
								} else {
									return 0; //Not a point
								}
							} else if (typeof objectToEvaluate.type === "object") {
								searchCoordinatesInFeature(objectToEvaluate.type, "type", inputName); //follow searching type:point
							} else {
								return 0;
							}
						} else if ((typeof objectToEvaluate.type === "object")) { //"type contain an object"
							searchCoordinatesInFeature(objectToEvaluate.type, "type", inputName); //keep searching deeper
						}
					} else { //keep searching deeper
						var objectKeys = Object.keys(objectToEvaluate)
						for (var i = 0; i < objectKeys.length; i++) {
							if (typeof objectToEvaluate.objectKeys[i] === "object") {
								searchCoordinatesInFeature(objectToEvaluate.objectKeys[i], "type", inputName);
							}
						}
					}

				} else if (propertyToSearch == "coordinates") {
					if (objectToEvaluate.hasOwnProperty(propertyToSearch)) {
						document.getElementById("dlgCreateUpdateDeleteEntity_" + inputName + "_longitude").value = objectToEvaluate.coordinates[0];
						document.getElementById("dlgCreateUpdateDeleteEntity_" + inputName + "_latitude").value = objectToEvaluate.coordinates[1];

					} else { //keep searching deper
						var objectKeys = Object.keys(objectToEvaluate)
						for (var i = 0; i < objectKeys.length; i++) {
							if (typeof objectToEvaluate.objectKeys[i] === "object") {
								searchCoordinatesInFeature(objectToEvaluate.objectKeys[i], "type", inputName);
							}
						}
					}
				}
			}
			else { //not an object
				return 0;
			}

		}






		for (var i = 0; i < groupsKeys.length; i++) {
			cdns += `<fieldset><legend>Group ${i}</legend>
				<label>Axis X</label><br><select name="DialogScatterPlotAxisXSelect_${i}" id="DialogScatterPlotAxisXSelect_${i}" style="" onchange="updateSelectInformationScatterPlot('${i}','X','${node.id}')">`
			for (var e = 0; e < e < attributesToSelect.length; e++) {
				options += `<optgroup label="${attributesToSelect[e].nodeLabel}">`
				for (var i = 0; i < attributesToSelect[e].attr.length; i++) {
					options += `<option value="${attributesToSelect[e].nodeId}_${attributesToSelect[e].attr[i]}"`
					if (node.STAattributesToSelect.dataGroups[i].X.includes(attributesToSelect[e].nodeId) && node.STAattributesToSelect.dataGroups[i].X.includes(attributesToSelect[e].attr[i])) options += "checked"; //checked option
					options += `>${attributesToSelect[e].attr[i]}</option>`
				}
				options += "</optgroup>"
			}
			`</select><br>
				<label>Axis Y</label><br><select name="DialogScatterPlotAxisYSelect_${i}" id="DialogScatterPlotAxisYSelect_${i}" style="" onchange="updateSelectInformationScatterPlot('${i}','Y','${node.id}')">`
			for (var e = 0; e < e < attributesToSelect.length; e++) {
				options += `<optgroup label="${attributesToSelect[e].nodeLabel}">`
				for (var i = 0; i < attributesToSelect[e].attr.length; i++) {
					options += `<option value="${attributesToSelect[e].nodeId}_${attributesToSelect[e].attr[i]}"`
					if (node.STAattributesToSelect.dataGroups[i].Y.includes(attributesToSelect[e].nodeId) && node.STAattributesToSelect.dataGroups[i].Y.includes(attributesToSelect[e].attr[i])) options += "checked"; //checked option
					options += `>${attributesToSelect[e].attr[i]}</option>`
				}
				options += "</optgroup>"
			}
			options += `</select><br>"
				<input type='radio'id="DialogScatterPlotAxisYRadioButton_Left_${i}" checked name="DialogScatterPlotAxisYRadioButton_${i}"</input><label>Left axis</label><br>
				<input type='radio'id="DialogScatterPlotAxisYRadioButton_Right_${i}" name="DialogScatterPlotAxisYRadioButton_${i}"</input><label>Right axis</label><br>
				<button onclick="deleteSelectGroupInScatterPlot('${node.id}', '${i}')"><img src="trash.png" alt="Remove" title="Remove"></button></fieldset>`
		}
	</script>
</body>

</html>